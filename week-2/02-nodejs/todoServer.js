/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,

  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const bodyParser = require("body-parser");
const { v4: uuidv4 } = require("uuid");
const fs = require("fs");
let myTodo = [];
const todoData = require('./todos.json');

const app = express();

app.use(bodyParser.json());
app.use(express.json());

// TASK-1 create a todo route to get all the todos i have

app.get("/todos", (req, res) => {
  fs.readFile("./todos.json", "utf8", (err, data) => {
    if (err) {
      res.status(404).send("Can't read file");
    }
    res.json(data);
  });
});

// TASK-2 create a dynamic todo route that takes todo id as parameter

app.get("/todos/:id", (req, res) => {
  const id = req.params.id;
  fs.readFile("./todos.json", "utf8", (err, data) => {
    if (err) {
      res.status(404).send("Not found");
      return;
    }
    const dataArray = JSON.parse(data);
    let todoFound = true;
    for (let i = 0; i < dataArray.length; i++) {
      if (id == dataArray[i].id) {
        myTodo.push(dataArray[i]);
        todoFound = true;
        break;
      } else {
        todoFound = false;
      }
    }
    if (todoFound) {
      res.send(myTodo);
      return; // adding return statement so that it dont execute further ( avoiding "can not set header again") another way to do it would be to cover the below line into else statement.
    }
    res.status(404).send("Not found");
  });
});

// TASK-3 create a post route to create a todo in the database that also takes an unique id for each task

app.post("/todos", (req, res) => {
  const newTodo = req.body;
  newTodo.id = uuidv4();
    todoData.push(newTodo);
    // console.log(todoData);
    fs.writeFile('./todos.json',JSON.stringify(todoData,null,2),(err)=>{
      if(err){
        res.status(500).send("Internal server error");
      } else{
        res.status(201).json({id:newTodo.id});
      }
    })
});

app.listen(4000);
module.exports = app;
